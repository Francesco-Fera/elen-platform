// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkflowEngine.Infrastructure.Data;

#nullable disable

namespace WorkflowEngine.Infrastructure.Migrations
{
    [DbContext(typeof(WorkflowEngineDbContext))]
    [Migration("20250910100106_AddMultiTenancy")]
    partial class AddMultiTenancy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WorkflowEngine.Core.Entities.ExecutionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DataJson")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NodeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionId");

                    b.HasIndex("Level");

                    b.HasIndex("NodeId");

                    b.HasIndex("Timestamp");

                    b.ToTable("ExecutionLogs");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Domain")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrialAccount")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxWorkflows")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("TrialExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasFilter("\"Domain\" IS NOT NULL");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("\"Slug\" IS NOT NULL");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.OrganizationInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AcceptedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InviteToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InvitedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedBy");

                    b.HasIndex("Email");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("InviteToken")
                        .IsUnique();

                    b.HasIndex("InvitedBy");

                    b.HasIndex("Status");

                    b.HasIndex("OrganizationId", "Email");

                    b.HasIndex("Status", "ExpiresAt");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.OrganizationMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvitedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InvitedBy");

                    b.HasIndex("IsActive");

                    b.HasIndex("JoinedAt");

                    b.HasIndex("Role");

                    b.HasIndex("OrganizationId", "UserId")
                        .IsUnique();

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("OrganizationMembers");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("TokenHash");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CurrentOrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordResetExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CurrentOrganizationId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectionsJson")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NodesJson")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("SettingsJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Name");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("Status");

                    b.HasIndex("Visibility");

                    b.HasIndex("OrganizationId", "Name");

                    b.HasIndex("OrganizationId", "Status", "CreatedAt");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("ErrorDataJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("InputDataJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("OutputDataJson")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowId", "Status", "StartedAt");

                    b.ToTable("WorkflowExecutions");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GrantedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GrantedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId", "UserId")
                        .IsUnique();

                    b.ToTable("WorkflowPermissions");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.ExecutionLog", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.WorkflowExecution", "Execution")
                        .WithMany("Logs")
                        .HasForeignKey("ExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Execution");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.User", "AcceptedByUser")
                        .WithMany()
                        .HasForeignKey("AcceptedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkflowEngine.Core.Entities.User", "Inviter")
                        .WithMany("SentInvites")
                        .HasForeignKey("InvitedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.Organization", "Organization")
                        .WithMany("Invites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedByUser");

                    b.Navigation("Inviter");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.OrganizationMember", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.User", "Inviter")
                        .WithMany()
                        .HasForeignKey("InvitedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkflowEngine.Core.Entities.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.User", "User")
                        .WithMany("Organizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inviter");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.User", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.Organization", "CurrentOrganization")
                        .WithMany()
                        .HasForeignKey("CurrentOrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentOrganization");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Workflow", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.User", "Creator")
                        .WithMany("CreatedWorkflows")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.Organization", "Organization")
                        .WithMany("Workflows")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowExecution", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkflowEngine.Core.Entities.Workflow", "Workflow")
                        .WithMany("Executions")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowPermission", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.User", "Granter")
                        .WithMany()
                        .HasForeignKey("GrantedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.Workflow", "Workflow")
                        .WithMany("Permissions")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Granter");

                    b.Navigation("User");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Organization", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.User", b =>
                {
                    b.Navigation("CreatedWorkflows");

                    b.Navigation("Organizations");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SentInvites");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.Workflow", b =>
                {
                    b.Navigation("Executions");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowExecution", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
